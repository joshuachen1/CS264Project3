PC       = 4194492
EPC      = 0
Cause    = 0
BadVAddr = 0
Status   = 805371664

HI       = 0
LO       = 0

R0  [r0] = 0
R1  [at] = 268500992
R2  [v0] = 10
R3  [v1] = 0
R4  [a0] = 268501096
R5  [a1] = 2147483148
R6  [a2] = -50
R7  [a3] = 0
R8  [t0] = 10
R9  [t1] = 35
R10 [t2] = 0
R11 [t3] = 0
R12 [t4] = 0
R13 [t5] = 0
R14 [t6] = 0
R15 [t7] = 0
R16 [s0] = 10
R17 [s1] = 0
R18 [s2] = 0
R19 [s3] = 0
R20 [s4] = 0
R21 [s5] = 2147483112
R22 [s6] = -40
R23 [s7] = 2147483108
R24 [t8] = 0
R25 [t9] = 0
R26 [k0] = 0
R27 [k1] = 0
R28 [gp] = 268468224
R29 [sp] = 2147483148
R30 [s8] = 0
R31 [ra] = 4194424


User Text Segment [00400000]..[00440000]
[00400000] 8fa40000  lw $4, 0($29)            ; 183: lw $a0 0($sp) # argc 
[00400004] 27a50004  addiu $5, $29, 4         ; 184: addiu $a1 $sp 4 # argv 
[00400008] 24a60004  addiu $6, $5, 4          ; 185: addiu $a2 $a1 4 # envp 
[0040000c] 00041080  sll $2, $4, 2            ; 186: sll $v0 $a0 2 
[00400010] 00c23021  addu $6, $6, $2          ; 187: addu $a2 $a2 $v0 
[00400014] 0c100009  jal 0x00400024 [main]    ; 188: jal main 
[00400018] 00000000  nop                      ; 189: nop 
[0040001c] 3402000a  ori $2, $0, 10           ; 191: li $v0 10 
[00400020] 0000000c  syscall                  ; 192: syscall # syscall 10 (exit) 
[00400024] 34080000  ori $8, $0, 0            ; 29: li $t0, 0 # $a1 is the counter i = 0 
[00400028] 34020004  ori $2, $0, 4            ; 32: li $v0, 4 
[0040002c] 3c041001  lui $4, 4097 [numberOfInts]; 33: la $a0, numberOfInts 
[00400030] 0000000c  syscall                  ; 34: syscall # "Number of Integers to Store: " 
[00400034] 34020005  ori $2, $0, 5            ; 35: li $v0, 5 
[00400038] 0000000c  syscall                  ; 36: syscall 
[0040003c] 0002082a  slt $1, $0, $2           ; 38: ble $v0, $0, reinitialize 
[00400040] 10200020  beq $1, $0, 128 [reinitialize-0x00400040] 
[00400044] 00028021  addu $16, $0, $2         ; 40: move $s0, $v0 
[00400048] 23bdfffc  addi $29, $29, -4        ; 41: addi $sp, $sp, -4 # Allocate space for the array size 
[0040004c] afb00000  sw $16, 0($29)           ; 42: sw $s0, 0($sp) # Store arraysize at the bottom of the stack 
[00400050] 23a50000  addi $5, $29, 0          ; 43: la $a1, 0($sp) # Remember the address of the bottom of the stack 
[00400054] 0110082a  slt $1, $8, $16          ; 46: bge $t0, $s0, prePrintStack 
[00400058] 1020000a  beq $1, $0, 40 [prePrintStack-0x00400058] 
[0040005c] 34020004  ori $2, $0, 4            ; 48: li $v0, 4 
[00400060] 3c011001  lui $1, 4097 [promptInt] ; 49: la $a0, promptInt 
[00400064] 3424001e  ori $4, $1, 30 [promptInt] 
[00400068] 0000000c  syscall                  ; 50: syscall # "Enter Integer: " 
[0040006c] 34020005  ori $2, $0, 5            ; 51: li $v0, 5 
[00400070] 0000000c  syscall                  ; 52: syscall 
[00400074] 0c100035  jal 0x004000d4 [preSortStack]; 54: jal preSortStack 
[00400078] 21080001  addi $8, $8, 1           ; 56: addi $t0, $t0, 1 # counter++ 
[0040007c] 08100015  j 0x00400054 [insertToStack]; 58: j insertToStack 
[00400080] 34020004  ori $2, $0, 4            ; 62: li $v0, 4 
[00400084] 3c011001  lui $1, 4097 [printSort] ; 63: la $a0, printSort 
[00400088] 3424002e  ori $4, $1, 46 [printSort] 
[0040008c] 0000000c  syscall                  ; 64: syscall # "Your Sorted Integers: " 
[00400090] 10bd000a  beq $5, $29, 40 [terminate-0x00400090]
[00400094] 34020001  ori $2, $0, 1            ; 69: li $v0, 1 
[00400098] 8fa40000  lw $4, 0($29)            ; 70: lw $a0, 0($sp) # Get value at top of stack 
[0040009c] 0000000c  syscall                  ; 71: syscall 
[004000a0] 34020004  ori $2, $0, 4            ; 72: li $v0, 4 
[004000a4] 3c011001  lui $1, 4097 [addspace]  ; 73: la $a0, addspace 
[004000a8] 34240068  ori $4, $1, 104 [addspace] 
[004000ac] 0000000c  syscall                  ; 74: syscall 
[004000b0] 23bd0004  addi $29, $29, 4         ; 76: addi $sp, $sp, 4 # Pop top of stack 
[004000b4] 08100024  j 0x00400090 [printStack]; 78: j printStack 
[004000b8] 3402000a  ori $2, $0, 10           ; 82: li $v0, 10 # terminate the program 
[004000bc] 0000000c  syscall                  ; 83: syscall 
[004000c0] 34020004  ori $2, $0, 4            ; 86: li $v0, 4 
[004000c4] 3c011001  lui $1, 4097 [invalidSize]; 87: la $a0, invalidSize 
[004000c8] 34240045  ori $4, $1, 69 [invalidSize] 
[004000cc] 0000000c  syscall                  ; 88: syscall 
[004000d0] 0810000a  j 0x00400028 [initializeNumInts]
[004000d4] 00023021  addu $6, $0, $2          ; 92: move $a2, $v0 # Place integer into argument 
[004000d8] 23bdfffc  addi $29, $29, -4        ; 93: addi $sp, $sp, -4 # Allocate space for incoming integer 
[004000dc] 23b50000  addi $21, $29, 0         ; 94: la $s5, 0($sp) # Keeps track of addresses in the stack 
[004000e0] afa60000  sw $6, 0($29)            ; 95: sw $a2, 0($sp) # Push incoming integer onto the stack to account for first input 
[004000e4] 22b50004  addi $21, $21, 4         ; 98: addi $s5, $s5, 4 # Go to the the address above $s5 
[004000e8] 22b7fffc  addi $23, $21, -4        ; 99: addi $s7, $s5, -4 # $s7 keeps track of the address before $s5 
[004000ec] 10b50005  beq $5, $21, 20 [exitSort-0x004000ec]
[004000f0] 8eb60000  lw $22, 0($21)           ; 102: lw $s6, 0($s5) # Get the value at the tracker 
[004000f4] 02c6082a  slt $1, $22, $6          ; 103: bgt $a2, $s6, swap # if (incoming integer > value at below it in the stack), then swap values 
[004000f8] 14200003  bne $1, $0, 12 [swap-0x004000f8] 
[004000fc] afa60000  sw $6, 0($29)            ; 105: sw $a2, 0($sp) # If the value above >= the incoming integer, push incoming integer onto stack 
[00400100] 03e00008  jr $31                   ; 108: jr $ra 
[00400104] 00164821  addu $9, $0, $22         ; 112: move $t1, $s6 # $t1 holds the value at tracker 
[00400108] aea60000  sw $6, 0($21)            ; 113: sw $a2, 0($s5) # Store the incoming integer at the tracker 
[0040010c] aee90000  sw $9, 0($23)            ; 114: sw $t1, 0($s7) # Store $t1 at top of stack 
[00400110] 08100039  j 0x004000e4 [sortStack] ; 116: j sortStack # Go back to sorting the stack in case there are smaller values above 

Kernel Text Segment [80000000]..[80010000]
[80000180] 0001d821  addu $27, $0, $1         ; 90: move $k1 $at # Save $at 
[80000184] 3c019000  lui $1, -28672           ; 92: sw $v0 s1 # Not re-entrant and we can't trust $sp 
[80000188] ac220200  sw $2, 512($1)           
[8000018c] 3c019000  lui $1, -28672           ; 93: sw $a0 s2 # But we need to use these registers 
[80000190] ac240204  sw $4, 516($1)           
[80000194] 401a6800  mfc0 $26, $13            ; 95: mfc0 $k0 $13 # Cause register 
[80000198] 001a2082  srl $4, $26, 2           ; 96: srl $a0 $k0 2 # Extract ExcCode Field 
[8000019c] 3084001f  andi $4, $4, 31          ; 97: andi $a0 $a0 0x1f 
[800001a0] 34020004  ori $2, $0, 4            ; 101: li $v0 4 # syscall 4 (print_str) 
[800001a4] 3c049000  lui $4, -28672 [__m1_]   ; 102: la $a0 __m1_ 
[800001a8] 0000000c  syscall                  ; 103: syscall 
[800001ac] 34020001  ori $2, $0, 1            ; 105: li $v0 1 # syscall 1 (print_int) 
[800001b0] 001a2082  srl $4, $26, 2           ; 106: srl $a0 $k0 2 # Extract ExcCode Field 
[800001b4] 3084001f  andi $4, $4, 31          ; 107: andi $a0 $a0 0x1f 
[800001b8] 0000000c  syscall                  ; 108: syscall 
[800001bc] 34020004  ori $2, $0, 4            ; 110: li $v0 4 # syscall 4 (print_str) 
[800001c0] 3344003c  andi $4, $26, 60         ; 111: andi $a0 $k0 0x3c 
[800001c4] 3c019000  lui $1, -28672           ; 112: lw $a0 __excp($a0) 
[800001c8] 00240821  addu $1, $1, $4          
[800001cc] 8c240180  lw $4, 384($1)           
[800001d0] 00000000  nop                      ; 113: nop 
[800001d4] 0000000c  syscall                  ; 114: syscall 
[800001d8] 34010018  ori $1, $0, 24           ; 116: bne $k0 0x18 ok_pc # Bad PC exception requires special checks 
[800001dc] 143a0008  bne $1, $26, 32 [ok_pc-0x800001dc] 
[800001e0] 00000000  nop                      ; 117: nop 
[800001e4] 40047000  mfc0 $4, $14             ; 119: mfc0 $a0 $14 # EPC 
[800001e8] 30840003  andi $4, $4, 3           ; 120: andi $a0 $a0 0x3 # Is EPC word-aligned? 
[800001ec] 10040004  beq $0, $4, 16 [ok_pc-0x800001ec]
[800001f0] 00000000  nop                      ; 122: nop 
[800001f4] 3402000a  ori $2, $0, 10           ; 124: li $v0 10 # Exit on really bad PC 
[800001f8] 0000000c  syscall                  ; 125: syscall 
[800001fc] 34020004  ori $2, $0, 4            ; 128: li $v0 4 # syscall 4 (print_str) 
[80000200] 3c019000  lui $1, -28672 [__m2_]   ; 129: la $a0 __m2_ 
[80000204] 3424000d  ori $4, $1, 13 [__m2_]   
[80000208] 0000000c  syscall                  ; 130: syscall 
[8000020c] 001a2082  srl $4, $26, 2           ; 132: srl $a0 $k0 2 # Extract ExcCode Field 
[80000210] 3084001f  andi $4, $4, 31          ; 133: andi $a0 $a0 0x1f 
[80000214] 14040002  bne $0, $4, 8 [ret-0x80000214]; 134: bne $a0 0 ret # 0 means exception was an interrupt 
[80000218] 00000000  nop                      ; 135: nop 
[8000021c] 401a7000  mfc0 $26, $14            ; 145: mfc0 $k0 $14 # Bump EPC register 
[80000220] 275a0004  addiu $26, $26, 4        ; 146: addiu $k0 $k0 4 # Skip faulting instruction 
[80000224] 409a7000  mtc0 $26, $14            ; 148: mtc0 $k0 $14 
[80000228] 3c019000  lui $1, -28672           ; 153: lw $v0 s1 # Restore other registers 
[8000022c] 8c220200  lw $2, 512($1)           
[80000230] 3c019000  lui $1, -28672           ; 154: lw $a0 s2 
[80000234] 8c240204  lw $4, 516($1)           
[80000238] 001b0821  addu $1, $0, $27         ; 157: move $at $k1 # Restore $at 
[8000023c] 40806800  mtc0 $0, $13             ; 160: mtc0 $0 $13 # Clear Cause register 
[80000240] 401a6000  mfc0 $26, $12            ; 162: mfc0 $k0 $12 # Set Status register 
[80000244] 375a0001  ori $26, $26, 1          ; 163: ori $k0 0x1 # Interrupts enabled 
[80000248] 409a6000  mtc0 $26, $12            ; 164: mtc0 $k0 $12 
[8000024c] 42000018  eret                     ; 167: eret 


User data segment [10000000]..[10040000]
[10000000]..[1000ffff]  00000000
[10010000]    01100010011011010111010101001110  01101111001000000111001001100101  01101110010010010010000001100110  01100101011001110110010101110100    N u m b e r   o f   I n t e g e 
[10010010]    01110100001000000111001101110010  01110100010100110010000001101111  00111010011001010111001001101111  01101110010001010000000000100000    r s   t o   S t o r e :   . E n 
[10010020]    00100000011100100110010101110100  01100101011101000110111001001001  00111010011100100110010101100111  01101111010110010000000000100000    t e r   I n t e g e r :   . Y o 
[10010030]    01010011001000000111001001110101  01100101011101000111001001101111  01101110010010010010000001100100  01100101011001110110010101110100    u r   S o r t e d   I n t e g e 
[10010040]    00100000001110100111001101110010  01101111010110010000101000000000  01001101001000000111001001110101  00100000011101000111001101110101    r s :   . . Y o u r   M u s t   
[10010050]    01000111001000000110010101000010  01110100011000010110010101110010  01010100001000000111001001100101  00100000011011100110000101101000    B e   G r e a t e r   T h a n   
[10010060]    01101111011100100110010101011010  00000000000010100000101000101110  00000000000010100000000000100000  00000000000000000000000000000000    Z e r o . . . .   . . . . . . . 
[10010070]..[1003ffff]  00000000


User Stack [7ffffe0c]..[80000000]
[7ffffe0c]    00000000000000000000000000001010                                                                                                          . . . . 
[7ffffe10]    00000000000000000000000000000001  01111111111111111111111001001111  00000000000000000000000000000000  01111111111111111111111111000111    . . . . O . . . . . . . . . . . 
[7ffffe20]    01111111111111111111111110100001  01111111111111111111111110010001  01111111111111111111111101111101  01111111111111111111111100110001    . . . . . . . . } . . . 1 . . . 
[7ffffe30]    01111111111111111111111011101111  01111111111111111111111011001100  01111111111111111111111010111100  01111111111111111111111010010101    . . . . . . . . . . . . . . . . 
[7ffffe40]    01111111111111111111111010001000  01111111111111111111111001111010  00000000000000000000000000000000  00101111111111111111111110010001    . . . . z . . . . . . . . . . / 
[7ffffe50]    01110010011001010111001101010101  01110100011100110010111101110011  01101110011001010110010001110101  01010011010000110010111101110100    U s e r s / s t u d e n t / C S 
[7ffffe60]    00101111001101000011011000110010  01101010011011110111001001010000  00110011011101000110001101100101  01101111011100100101000000101111    2 6 4 / P r o j e c t 3 / P r o 
[7ffffe70]    01110100011000110110010101101010  01110011011000010010111000110011  01010000010110000000000001101101  01001100010001100101111101000011    j e c t 3 . a s m . X P C _ F L 
[7ffffe80]    00111101010100110100011101000001  00000000001100000111100000110000  01010010010001010101001101010101  01110101011101000111001100111101    A G S = 0 x 0 . U S E R = s t u 
[7ffffe90]    01110100011011100110010101100100  01000011010100000101100000000000  01010010010001010101001101011111  01000101010000110100100101010110    d e n t . X P C _ S E R V I C E 
[7ffffea0]    01001101010000010100111001011111  01101111011000110011110101000101  01100001011011000010111001101101  00101110011100110111010101110010    _ N A M E = c o m . l a r u s . 
[7ffffeb0]    01110000011100110111010001110001  00110101001011100110110101101001  00000000001110000011000000110000  01001110010001110100111101001100    q t s p i m . 5 0 0 8 . L O G N 
[7ffffec0]    00111101010001010100110101000001  01100100011101010111010001110011  00000000011101000110111001100101  01001000010101000100000101010000    A M E = s t u d e n t . P A T H 
[7ffffed0]    01110011011101010010111100111101  01101001011000100010111101110010  01100010001011110011101001101110  00101111001110100110111001101001    = / u s r / b i n : / b i n : / 
[7ffffee0]    00101111011100100111001101110101  01101110011010010110001001110011  01100010011100110010111100111010  01010011000000000110111001101001    u s r / s b i n : / s b i n . S 
[7ffffef0]    01000001010111110100100001010011  01011111010010000101010001010101  01001011010000110100111101010011  01110010011100000010111100111101    S H _ A U T H _ S O C K = / p r 
[7fffff00]    01110100011000010111011001101001  01101101011101000010111101100101  01101111011000110010111101110000  01110000011000010010111001101101    i v a t e / t m p / c o m . a p 
[7fffff10]    00101110011001010110110001110000  01101110011101010110000101101100  00101110011001000110100001100011  01010000001101010100001001010111    p l e . l a u n c h d . W B 5 P 
[7fffff20]    01001111011110000110101001101010  01001100001011110110001101010011  01100101011101000111001101101001  01110011011100100110010101101110    j j x O S c / L i s t e n e r s 
[7fffff30]    01110000011100000100000100000000  01010000010111110110010101101100  01110101010100110110001001110101  01101111010100110101111101100010    . A p p l e _ P u b S u b _ S o 
[7fffff40]    01110100011001010110101101100011  01101110011001010101001001011111  00111101011100100110010101100100  01101001011100100111000000101111    c k e t _ R e n d e r = / p r i 
[7fffff50]    01100101011101000110000101110110  01110000011011010111010000101111  01101101011011110110001100101111  01110000011100000110000100101110    v a t e / t m p / c o m . a p p 
[7fffff60]    01101100001011100110010101101100  01100011011011100111010101100001  01001010001011100110010001101000  01000100010001000110111101111000    l e . l a u n c h d . J x o D D 
[7fffff70]    01110110010010000110010101101010  01100101010100100010111101100111  01110010011001010110010001101110  01001101010011110100100000000000    j e H v g / R e n d e r . H O M 
[7fffff80]    01010101001011110011110101000101  01110011011100100110010101110011  01110101011101000111001100101111  01110100011011100110010101100100    E = / U s e r s / s t u d e n t 
[7fffff90]    01000101010010000101001100000000  00101111001111010100110001001100  00101111011011100110100101100010  01101000011100110110000101100010    . S H E L L = / b i n / b a s h 
[7fffffa0]    01000011010111110101111100000000  01010011010101010101111101000110  01010100010111110101001001000101  01011111010101000101100001000101    . _ _ C F _ U S E R _ T E X T _ 
[7fffffb0]    01001111010000110100111001000101  01000111010011100100100101000100  00110001011110000011000000111101  00110000001110100011011001000110    E N C O D I N G = 0 x 1 F 6 : 0 
[7fffffc0]    00110000001110100011000001111000  01010100000000000011000001111000  01001001010001000101000001001101  01110110001011110011110101010010    x 0 : 0 x 0 . T M P D I R = / v 
[7fffffd0]    01100110001011110111001001100001  01100101011001000110110001101111  01101110001011110111001101110010  00110111011101100010111101101011    a r / f o l d e r s / n k / v 7 
[7fffffe0]    00111001001100010011010000110110  01101100001101000111100001110100  01110010011000110110001101101010  00110010011000100111101000110100    6 4 1 9 t x 4 l j c c r 4 z b 2 
[7ffffff0]    01101011011100000110100001110100  00110000001100000110110101110011  01110000011001110011000000110000  00000000001011110101010000101111    t h p k s m 0 0 0 0 g p / T / . 


Kernel data segment [90000000]..[90010000]
[90000000]    01111000010001010010000000100000  01110100011100000110010101100011  00100000011011100110111101101001  01100011011011110010000000000000        E x c e p t i o n   .   o c 
[90000010]    01110010011100100111010101100011  01100001001000000110010001100101  01101001001000000110010001101110  01110010011011110110111001100111    c u r r e d   a n d   i g n o r 
[90000020]    00000000000010100110010001100101  01001001010110110010000000100000  01110010011001010111010001101110  01110100011100000111010101110010    e d . .     [ I n t e r r u p t 
[90000030]    00100000000000000010000001011101  01001100010101000101101100100000  00100000000000000101110101000010  01001100010101000101101100100000    ]   .     [ T L B ] .     [ T L 
[90000040]    00100000000000000101110101000010  01001100010101000101101100100000  00100000000000000101110101000010  01100100010000010101101100100000    B ] .     [ T L B ] .     [ A d 
[90000050]    01110011011001010111001001100100  01110010011001010010000001110011  00100000011100100110111101110010  01101001001000000110111001101001    d r e s s   e r r o r   i n   i 
[90000060]    00101111011101000111001101101110  01100001011101000110000101100100  01110100011001010110011000100000  00100000010111010110100001100011    n s t / d a t a   f e t c h ]   
[90000070]    01011011001000000010000000000000  01110010011001000110010001000001  00100000011100110111001101100101  01101111011100100111001001100101    .     [ A d d r e s s   e r r o 
[90000080]    01101110011010010010000001110010  01101111011101000111001100100000  00100000010111010110010101110010  01011011001000000010000000000000    r   i n   s t o r e ]   .     [ 
[90000090]    00100000011001000110000101000010  01110100011100110110111001101001  01110100011000110111010101110010  00100000011011100110111101101001    B a d   i n s t r u c t i o n   
[900000a0]    01110010011001000110010001100001  01011101011100110111001101100101  00100000001000000000000000100000  01100100011000010100001001011011    a d d r e s s ]   .     [ B a d 
[900000b0]    01110100011000010110010000100000  01100100011000010010000001100001  01110011011001010111001001100100  00000000001000000101110101110011      d a t a   a d d r e s s ]   . 
[900000c0]    01000101010110110010000000100000  01110010011011110111001001110010  00100000011011100110100100100000  01100011011100110111100101110011        [ E r r o r   i n   s y s c 
[900000d0]    01011101011011000110110001100001  00100000001000000000000000100000  01100101011100100100001001011011  01101111011100000110101101100001    a l l ]   .     [ B r e a k p o 
[900000e0]    01011101011101000110111001101001  00100000001000000000000000100000  01110011011001010101001001011011  01100101011101100111001001100101    i n t ]   .     [ R e s e r v e 
[900000f0]    01101110011010010010000001100100  01110101011100100111010001110011  01101111011010010111010001100011  00000000001000000101110101101110    d   i n s t r u c t i o n ]   . 
[90000100]    01011011001000000010000000000000  01110100011010010111001001000001  01110100011001010110110101101000  01101111001000000110001101101001    .     [ A r i t h m e t i c   o 
[90000110]    01100110011100100110010101110110  01011101011101110110111101101100  00100000001000000000000000100000  01100001011100100101010001011011    v e r f l o w ]   .     [ T r a 
[90000120]    00000000001000000101110101110000  01011011001000000010000000000000  01100001011011110110110001000110  01100111011011100110100101110100    p ]   . .     [ F l o a t i n g 
[90000130]    01101001011011110111000000100000  00100000010111010111010001101110  00100000000000000000000000000000  01101111010000110101101100100000      p o i n t ]   . . .     [ C o 
[90000140]    01100011011011110111001001110000  00000000010111010011001000100000  00100000000000000000000000000000  01000100010011010101101100100000    p r o c   2 ] . . . .     [ M D 
[90000150]    00000000010111010101100001001101  01010111010110110010000000100000  01101000011000110111010001100001  00100000001000000000000001011101    M X ] .     [ W a t c h ] .     
[90000160]    01100011011000010100110101011011  01100101011011100110100101101000  01100101011010000110001100100000  00000000010111010110101101100011    [ M a c h i n e   c h e c k ] . 
[90000170]    00000000000000000000000000000000  01011011001000000010000000000000  01101000011000110110000101000011  00000000000000000101110101100101    . . . . .     [ C a c h e ] . . 
[90000180]    10010000000000000000000000100100  10010000000000000000000000110011  10010000000000000000000000111011  10010000000000000000000001000011    $ . . . 3 . . . ; . . . C . . . 
[90000190]    10010000000000000000000001001011  10010000000000000000000001110001  10010000000000000000000010001101  10010000000000000000000010101010    K . . . q . . . . . . . . . . . 
[900001a0]    10010000000000000000000011000000  10010000000000000000000011010110  10010000000000000000000011100110  10010000000000000000000100000000    . . . . . . . . . . . . . . . . 
[900001b0]    10010000000000000000000100000001  10010000000000000000000100011010  10010000000000000000000100100100  10010000000000000000000100100101    . . . . . . . . $ . . . % . . . 
[900001c0]    10010000000000000000000100111001  10010000000000000000000100111010  10010000000000000000000100111011  10010000000000000000000101001000    9 . . . : . . . ; . . . H . . . 
[900001d0]    10010000000000000000000101001001  10010000000000000000000101001010  10010000000000000000000101001011  10010000000000000000000101010100    I . . . J . . . K . . . T . . . 
[900001e0]    10010000000000000000000101011110  10010000000000000000000101110000  10010000000000000000000101110001  10010000000000000000000101110010    ^ . . . p . . . q . . . r . . . 
[900001f0]    10010000000000000000000101110011  10010000000000000000000101110100  10010000000000000000000101110101  10010000000000000000000101111111    s . . . t . . . u . . . . . . . 
[90000200]..[9000ffff]  00000000


Number of Integers to Store: 10
Enter Integer: 5
Enter Integer: -10
Enter Integer: 15
Enter Integer: -20
Enter Integer: 25
Enter Integer: -30
Enter Integer: 35
Enter Integer: -40
Enter Integer: 45
Enter Integer: -50
Your Sorted Integers: -50 -40 -30 -20 -10 5 15 25 35 45 